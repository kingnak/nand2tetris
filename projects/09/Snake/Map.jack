class Map {
	field Array fields;
	
	static int MinX;
	static int MinY;
	static int MaxX; // = 512 / 8
	static int MaxY; // = 256 / 8
	static int FieldCount; // 2048
	static int BlockSize;
	
	function void staticInit() {
		let MinX = 0;
		let MinY = 0;
		let MaxX = 64;
		let MaxY = 32;
		let FieldCount = 2048;
		let BlockSize = 8;
		return;
	}
	
	constructor Map new() {
		var int x,y,s;
		var Array column;
		do Map.staticInit();
		let fields = Array.new(MaxX);
		let x = 0;
		while (x < MaxX) {
			let fields[x] = Array.new(MaxY);
			let column = fields[x];
			let y = 0;
			while (y < MaxY) {
				let column[y] = Field.new();
				let y = y+1;
			}
			let x = x+1;
		}
		return this;
	}
	
	method void reset() {
		var int x,y,s;
		var Array column;
		var Field f;
		let x = 0;
		while (x < MaxX) {
			let column = fields[x];
			let y = 0;
			while (y < MaxY) {
				if ((x=0) | (y=0) | (x = (MaxX-1)) | (y = (MaxY-1))) {
					let s = Field.WallType();
				} else {
					let s = Field.FreeType();
				}
					
				let f = column[y];
				do f.setType(s);
				let y = y+1;
			}
			let x = x+1;
		}
		return;
	}
	
	method void dispose() {
		var int x, y;
		var Array column;
		var Field f;
		let x = 0;
		while (x < MaxX) {
			let column = fields[x];
			let y = 0;
			while (y < MaxY) {
				let f = column[y];
				do f.dispose();
				let y = y+1;
			}
			do column.dispose();
			let x = x+1;
		}
		do Memory.deAlloc(this);
		return;
	}
	
	method void update() {
		var int x,y;
		var Array column;
		var Field f;
		let x = 0;
		while (x < MaxX) {
			let column = fields[x];
			let y = 0;
			while (y < MaxY) {
				let f = column[y];
				do f.move();
				let y = y+1;
			}
			let x = x+1;
		}
		return;
	}
	
	method void placeFood() {
		do Food.placeFood(this);
		return;
	}
	
	method Field getField(int x, int y) {
		var Array column;
		var Field f;
		let column = fields[x];
		let f = column[y];
		return f;
	}
	
	method void draw() {
		do doDraw(false);
		return;
	}
	
	method void drawGameOver() {
		do doDraw(true);
		return;
	}
	
	method void doDraw(boolean go) {
		var int x,y,rx,ry;
		var Array column;
		var Field f;

		let x = 0;
		let rx = 0;
		while (x < MaxX) {
			let column = fields[x];
			let y = 0;
			let ry = 0;
			while (y < MaxY) {
				let f = column[y];
				do f.draw(rx, ry, BlockSize, go);
				let y = y + 1;
				let ry = ry + BlockSize;
			}
			let x = x + 1;
			let rx = rx + BlockSize;
		}
		return;
	}
}
