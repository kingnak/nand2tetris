// class Square
// field int (this 0)
// field int (this 1)
// field int (this 2)


// constructor Square new
// param int Ax (arg 0)
// param int Ay (arg 1)
// param int Asize (arg 2)
function Square.new 0
push constant 3
call Memory.alloc 1
pop pointer 0

// let x = Ax;
push argument 0
pop this 0

// let y = Ay;
push argument 1
pop this 1

// let size = Asize;
push argument 2
pop this 2

// do .draw( );
push pointer 0
call Square.draw 1
pop temp 0

// return this;
push pointer 0
return
// End of constructor new


// method void dispose
function Square.dispose 0
push argument 0
pop pointer 0

// do Memory.deAlloc( this );
push pointer 0
call Memory.deAlloc 1
pop temp 0

// return ;
push constant 0
return
// End of method dispose


// method void draw
function Square.draw 0
push argument 0
pop pointer 0

// do Screen.setColor( true );
push constant 1
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,y,x + size,y + size );
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0

// return ;
push constant 0
return
// End of method draw


// method void erase
function Square.erase 0
push argument 0
pop pointer 0

// do Screen.setColor( false );
push constant 0
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,y,x + size,y + size );
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0

// return ;
push constant 0
return
// End of method erase


// method void incSize
function Square.incSize 0
push argument 0
pop pointer 0

// if (((y + size) < 254) & ((x + size) < 510)) {
push this 1
push this 2
add
push constant 254
lt
push this 0
push this 2
add
push constant 510
lt
and
not
if-goto $LABEL_0_False

// do .erase( );
push pointer 0
call Square.erase 1
pop temp 0

// let size = size + 2;
push this 2
push constant 2
add
pop this 2

// do .draw( );
push pointer 0
call Square.draw 1
pop temp 0
label $LABEL_0_False
// }
// end if
label $LABEL_0_End

// return ;
push constant 0
return
// End of method incSize


// method void decSize
function Square.decSize 0
push argument 0
pop pointer 0

// if (size > 2) {
push this 2
push constant 2
gt
not
if-goto $LABEL_1_False

// do .erase( );
push pointer 0
call Square.erase 1
pop temp 0

// let size = size - 2;
push this 2
push constant 2
sub
pop this 2

// do .draw( );
push pointer 0
call Square.draw 1
pop temp 0
label $LABEL_1_False
// }
// end if
label $LABEL_1_End

// return ;
push constant 0
return
// End of method decSize


// method void moveUp
function Square.moveUp 0
push argument 0
pop pointer 0

// if (y > 1) {
push this 1
push constant 1
gt
not
if-goto $LABEL_2_False

// do Screen.setColor( false );
push constant 0
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,(y + size) - 1,x + size,y + size );
push this 0
push this 1
push this 2
add
push constant 1
sub
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0

// let y = y - 2;
push this 1
push constant 2
sub
pop this 1

// do Screen.setColor( true );
push constant 1
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,y,x + size,y + 1 );
push this 0
push this 1
push this 0
push this 2
add
push this 1
push constant 1
add
call Screen.drawRectangle 4
pop temp 0
label $LABEL_2_False
// }
// end if
label $LABEL_2_End

// return ;
push constant 0
return
// End of method moveUp


// method void moveDown
function Square.moveDown 0
push argument 0
pop pointer 0

// if ((y + size) < 254) {
push this 1
push this 2
add
push constant 254
lt
not
if-goto $LABEL_3_False

// do Screen.setColor( false );
push constant 0
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,y,x + size,y + 1 );
push this 0
push this 1
push this 0
push this 2
add
push this 1
push constant 1
add
call Screen.drawRectangle 4
pop temp 0

// let y = y + 2;
push this 1
push constant 2
add
pop this 1

// do Screen.setColor( true );
push constant 1
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,(y + size) - 1,x + size,y + size );
push this 0
push this 1
push this 2
add
push constant 1
sub
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
label $LABEL_3_False
// }
// end if
label $LABEL_3_End

// return ;
push constant 0
return
// End of method moveDown


// method void moveLeft
function Square.moveLeft 0
push argument 0
pop pointer 0

// if (x > 1) {
push this 0
push constant 1
gt
not
if-goto $LABEL_4_False

// do Screen.setColor( false );
push constant 0
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( (x + size) - 1,y,x + size,y + size );
push this 0
push this 2
add
push constant 1
sub
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0

// let x = x - 2;
push this 0
push constant 2
sub
pop this 0

// do Screen.setColor( true );
push constant 1
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,y,x + 1,y + size );
push this 0
push this 1
push this 0
push constant 1
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
label $LABEL_4_False
// }
// end if
label $LABEL_4_End

// return ;
push constant 0
return
// End of method moveLeft


// method void moveRight
function Square.moveRight 0
push argument 0
pop pointer 0

// if ((x + size) < 510) {
push this 0
push this 2
add
push constant 510
lt
not
if-goto $LABEL_5_False

// do Screen.setColor( false );
push constant 0
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( x,y,x + 1,y + size );
push this 0
push this 1
push this 0
push constant 1
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0

// let x = x + 2;
push this 0
push constant 2
add
pop this 0

// do Screen.setColor( true );
push constant 1
call Screen.setColor 1
pop temp 0

// do Screen.drawRectangle( (x + size) - 1,y,x + size,y + size );
push this 0
push this 2
add
push constant 1
sub
push this 1
push this 0
push this 2
add
push this 1
push this 2
add
call Screen.drawRectangle 4
pop temp 0
label $LABEL_5_False
// }
// end if
label $LABEL_5_End

// return ;
push constant 0
return
// End of method moveRight
// end class Square
