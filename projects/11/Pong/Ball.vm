// class Ball
// field int x (this 0)
// field int y (this 1)
// field int lengthx (this 2)
// field int lengthy (this 3)
// field int d (this 4)
// field int straightD (this 5)
// field int diagonalD (this 6)
// field boolean invert (this 7)
// field boolean positivex (this 8)
// field boolean positivey (this 9)
// field int leftWall (this 10)
// field int rightWall (this 11)
// field int topWall (this 12)
// field int bottomWall (this 13)
// field int wall (this 14)


// constructor Ball new
// param int Ax (arg 0)
// param int Ay (arg 1)
// param int AleftWall (arg 2)
// param int ArightWall (arg 3)
// param int AtopWall (arg 4)
// param int AbottomWall (arg 5)
function Ball.new 0
push constant 15
call Memory.alloc 1
pop pointer 0

// let x = Ax;
push argument 0
pop this 0

// let y = Ay;
push argument 1
pop this 1

// let leftWall = AleftWall;
push argument 2
pop this 10

// let rightWall = ArightWall - 6;
push argument 3
push constant 6
sub
pop this 11

// let topWall = AtopWall;
push argument 4
pop this 12

// let bottomWall = AbottomWall - 6;
push argument 5
push constant 6
sub
pop this 13

// let wall = 0;
push constant 0
pop this 14

// do .show( );
push pointer 0
call Ball.show 1
pop temp 0

// return this;
push pointer 0
return
// End of constructor new


// method void dispose
function Ball.dispose 0
push argument 0
pop pointer 0

// do Memory.deAlloc( this );
push pointer 0
call Memory.deAlloc 1
pop temp 0

// return ;
push constant 0
return
// End of method dispose


// method void show
function Ball.show 0
push argument 0
pop pointer 0

// do Screen.setColor( true );
push constant 1
call Screen.setColor 1
pop temp 0

// do .draw( );
push pointer 0
call Ball.draw 1
pop temp 0

// return ;
push constant 0
return
// End of method show


// method void hide
function Ball.hide 0
push argument 0
pop pointer 0

// do Screen.setColor( false );
push constant 0
call Screen.setColor 1
pop temp 0

// do .draw( );
push pointer 0
call Ball.draw 1
pop temp 0

// return ;
push constant 0
return
// End of method hide


// method void draw
function Ball.draw 0
push argument 0
pop pointer 0

// do Screen.drawRectangle( x,y,x + 5,y + 5 );
push this 0
push this 1
push this 0
push constant 5
add
push this 1
push constant 5
add
call Screen.drawRectangle 4
pop temp 0

// return ;
push constant 0
return
// End of method draw


// method int getLeft
function Ball.getLeft 0
push argument 0
pop pointer 0

// return x;
push this 0
return
// End of method getLeft


// method int getRight
function Ball.getRight 0
push argument 0
pop pointer 0

// return x + 5;
push this 0
push constant 5
add
return
// End of method getRight


// method void setDestination
// param int destx (arg 1)
// param int desty (arg 2)
// var int dx (local 0)
// var int dy (local 1)
// var int temp (local 2)
function Ball.setDestination 3
push argument 0
pop pointer 0

// let lengthx = destx - x;
push argument 1
push this 0
sub
pop this 2

// let lengthy = desty - y;
push argument 2
push this 1
sub
pop this 3

// let dx = Math.abs( lengthx );
push this 2
call Math.abs 1
pop local 0

// let dy = Math.abs( lengthy );
push this 3
call Math.abs 1
pop local 1

// let invert = (dx < dy);
push local 0
push local 1
lt
pop this 7

// if (invert) {
push this 7
not
if-goto $LABEL_0_False

// let temp = dx;
push local 0
pop local 2

// let dx = dy;
push local 1
pop local 0

// let dy = temp;
push local 2
pop local 1

// let positivex = (y < desty);
push this 1
push argument 2
lt
pop this 8

// let positivey = (x < destx);
push this 0
push argument 1
lt
pop this 9
// } else { 
goto $LABEL_0_End
label $LABEL_0_False

// let positivex = (x < destx);
push this 0
push argument 1
lt
pop this 8

// let positivey = (y < desty);
push this 1
push argument 2
lt
pop this 9
// }
// end if
label $LABEL_0_End

// let d = (2 * dy) - dx;
push constant 2
push local 1
call Math.multiply 2
push local 0
sub
pop this 4

// let straightD = 2 * dy;
push constant 2
push local 1
call Math.multiply 2
pop this 5

// let diagonalD = 2 * (dy - dx);
push constant 2
push local 1
push local 0
sub
call Math.multiply 2
pop this 6

// return ;
push constant 0
return
// End of method setDestination


// method int move
function Ball.move 0
push argument 0
pop pointer 0

// do .hide( );
push pointer 0
call Ball.hide 1
pop temp 0

// if (d < 0) {
push this 4
push constant 0
lt
not
if-goto $LABEL_1_False

// let d = d + straightD;
push this 4
push this 5
add
pop this 4
// } else { 
goto $LABEL_1_End
label $LABEL_1_False

// let d = d + diagonalD;
push this 4
push this 6
add
pop this 4

// if (positivey) {
push this 9
not
if-goto $LABEL_2_False

// if (invert) {
push this 7
not
if-goto $LABEL_3_False

// let x = x + 4;
push this 0
push constant 4
add
pop this 0
// } else { 
goto $LABEL_3_End
label $LABEL_3_False

// let y = y + 4;
push this 1
push constant 4
add
pop this 1
// }
// end if
label $LABEL_3_End
// } else { 
goto $LABEL_2_End
label $LABEL_2_False

// if (invert) {
push this 7
not
if-goto $LABEL_4_False

// let x = x - 4;
push this 0
push constant 4
sub
pop this 0
// } else { 
goto $LABEL_4_End
label $LABEL_4_False

// let y = y - 4;
push this 1
push constant 4
sub
pop this 1
// }
// end if
label $LABEL_4_End
// }
// end if
label $LABEL_2_End
// }
// end if
label $LABEL_1_End

// if (positivex) {
push this 8
not
if-goto $LABEL_5_False

// if (invert) {
push this 7
not
if-goto $LABEL_6_False

// let y = y + 4;
push this 1
push constant 4
add
pop this 1
// } else { 
goto $LABEL_6_End
label $LABEL_6_False

// let x = x + 4;
push this 0
push constant 4
add
pop this 0
// }
// end if
label $LABEL_6_End
// } else { 
goto $LABEL_5_End
label $LABEL_5_False

// if (invert) {
push this 7
not
if-goto $LABEL_7_False

// let y = y - 4;
push this 1
push constant 4
sub
pop this 1
// } else { 
goto $LABEL_7_End
label $LABEL_7_False

// let x = x - 4;
push this 0
push constant 4
sub
pop this 0
// }
// end if
label $LABEL_7_End
// }
// end if
label $LABEL_5_End

// if (~(x > leftWall)) {
push this 0
push this 10
gt
not
not
if-goto $LABEL_8_False

// let wall = 1;
push constant 1
pop this 14

// let x = leftWall;
push this 10
pop this 0
label $LABEL_8_False
// }
// end if
label $LABEL_8_End

// if (~(x < rightWall)) {
push this 0
push this 11
lt
not
not
if-goto $LABEL_9_False

// let wall = 2;
push constant 2
pop this 14

// let x = rightWall;
push this 11
pop this 0
label $LABEL_9_False
// }
// end if
label $LABEL_9_End

// if (~(y > topWall)) {
push this 1
push this 12
gt
not
not
if-goto $LABEL_10_False

// let wall = 3;
push constant 3
pop this 14

// let y = topWall;
push this 12
pop this 1
label $LABEL_10_False
// }
// end if
label $LABEL_10_End

// if (~(y < bottomWall)) {
push this 1
push this 13
lt
not
not
if-goto $LABEL_11_False

// let wall = 4;
push constant 4
pop this 14

// let y = bottomWall;
push this 13
pop this 1
label $LABEL_11_False
// }
// end if
label $LABEL_11_End

// do .show( );
push pointer 0
call Ball.show 1
pop temp 0

// return wall;
push this 14
return
// End of method move


// method void bounce
// param int bouncingDirection (arg 1)
// var int newx (local 0)
// var int newy (local 1)
// var int divLengthx (local 2)
// var int divLengthy (local 3)
// var int factor (local 4)
function Ball.bounce 5
push argument 0
pop pointer 0

// let divLengthx = lengthx / 10;
push this 2
push constant 10
call Math.divide 2
pop local 2

// let divLengthy = lengthy / 10;
push this 3
push constant 10
call Math.divide 2
pop local 3

// if (bouncingDirection = 0) {
push argument 1
push constant 0
eq
not
if-goto $LABEL_12_False

// let factor = 10;
push constant 10
pop local 4
// } else { 
goto $LABEL_12_End
label $LABEL_12_False

// if (((~(lengthx < 0)) & (bouncingDirection = 1)) | ((lengthx < 0) & (bouncingDirection = (-1)))) {
push this 2
push constant 0
lt
not
push argument 1
push constant 1
eq
and
push this 2
push constant 0
lt
push argument 1
push constant 1
neg
eq
and
or
not
if-goto $LABEL_13_False

// let factor = 20;
push constant 20
pop local 4
// } else { 
goto $LABEL_13_End
label $LABEL_13_False

// let factor = 5;
push constant 5
pop local 4
// }
// end if
label $LABEL_13_End
// }
// end if
label $LABEL_12_End

// if (wall = 1) {
push this 14
push constant 1
eq
not
if-goto $LABEL_14_False

// let newx = 506;
push constant 506
pop local 0

// let newy = (divLengthy * (-50)) / divLengthx;
push local 3
push constant 50
neg
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1

// let newy = y + (newy * factor);
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
// } else { 
goto $LABEL_14_End
label $LABEL_14_False

// if (wall = 2) {
push this 14
push constant 2
eq
not
if-goto $LABEL_15_False

// let newx = 0;
push constant 0
pop local 0

// let newy = (divLengthy * 50) / divLengthx;
push local 3
push constant 50
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1

// let newy = y + (newy * factor);
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
// } else { 
goto $LABEL_15_End
label $LABEL_15_False

// if (wall = 3) {
push this 14
push constant 3
eq
not
if-goto $LABEL_16_False

// let newy = 250;
push constant 250
pop local 1

// let newx = (divLengthx * (-25)) / divLengthy;
push local 2
push constant 25
neg
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0

// let newx = x + (newx * factor);
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
// } else { 
goto $LABEL_16_End
label $LABEL_16_False

// let newy = 0;
push constant 0
pop local 1

// let newx = (divLengthx * 25) / divLengthy;
push local 2
push constant 25
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0

// let newx = x + (newx * factor);
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
// }
// end if
label $LABEL_16_End
// }
// end if
label $LABEL_15_End
// }
// end if
label $LABEL_14_End

// do .setDestination( newx,newy );
push pointer 0
push local 0
push local 1
call Ball.setDestination 3
pop temp 0

// return ;
push constant 0
return
// End of method bounce
// end class Ball
