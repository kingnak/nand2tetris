// class Main


// function void main
// var int value (local 0)
function Main.main 1

// do Main.fillMemory( 8001,16,-1 );
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0

// let value = Memory.peek( 8000 );
push constant 8000
call Memory.peek 1
pop local 0

// do Main.convert( value );
push local 0
call Main.convert 1
pop temp 0

// return ;
push constant 0
return
// End of function main


// function void convert
// param int value (arg 0)
// var int mask (local 0)
// var int position (local 1)
// var boolean loop (local 2)
function Main.convert 3

// let loop = true;
push constant 1
pop local 2

// while (loop) {
label $LABEL_0_Start
push local 2
not
if-goto $LABEL_0_End

// let position = position + 1;
push local 1
push constant 1
add
pop local 1

// let mask = Main.nextMask( mask );
push local 0
call Main.nextMask 1
pop local 0

// if (~(position > 16)) {
push local 1
push constant 16
gt
not
not
if-goto $LABEL_1_False

// if (~((value & mask) = 0)) {
push argument 0
push local 0
and
push constant 0
eq
not
not
if-goto $LABEL_2_False

// do Memory.poke( 8000 + position,1 );
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
// } else { 
goto $LABEL_2_End
label $LABEL_2_False

// do Memory.poke( 8000 + position,0 );
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
// }
// end if
label $LABEL_2_End
// } else { 
goto $LABEL_1_End
label $LABEL_1_False

// let loop = false;
push constant 0
pop local 2
// }
// end if
label $LABEL_1_End
// }
// end while
goto $LABEL_0_Start
label $LABEL_0_End

// return ;
push constant 0
return
// End of function convert


// function int nextMask
// param int mask (arg 0)
function Main.nextMask 0

// if (mask = 0) {
push argument 0
push constant 0
eq
not
if-goto $LABEL_3_False

// return 1;
push constant 1
return
// } else { 
goto $LABEL_3_End
label $LABEL_3_False

// return mask * 2;
push argument 0
push constant 2
call Math.multiply 2
return
// }
// end if
label $LABEL_3_End
// End of function nextMask


// function void fillMemory
// param int startAddress (arg 0)
// param int length (arg 1)
// param int value (arg 2)
function Main.fillMemory 0

// while (length > 0) {
label $LABEL_4_Start
push argument 1
push constant 0
gt
not
if-goto $LABEL_4_End

// do Memory.poke( startAddress,value );
push argument 0
push argument 2
call Memory.poke 2
pop temp 0

// let length = length - 1;
push argument 1
push constant 1
sub
pop argument 1

// let startAddress = startAddress + 1;
push argument 0
push constant 1
add
pop argument 0
// }
// end while
goto $LABEL_4_Start
label $LABEL_4_End

// return ;
push constant 0
return
// End of function fillMemory
// end class Main
