// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static boolean _clr;
	static Array _scrn;
	static Array _bit;

    /** Initializes the Screen. */
    function void init() {
		var int m, i;
		let _clr = true;
		let _scrn = 16384;
		
		let _bit = Array.new(16);
		let m = 1;
		while (i < 16) {
			let _bit[i] = m;
			let m = m+m;
			let i = i+1;
		}
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var boolean t;
		let t = _clr;
		let _clr = false;
		do drawRectangle(0,0,511,255);
		let _clr = t;
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let _clr = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int addr, off;
		var int val;
		
		do __checkCoords(x,y,0,0, 7); // Illegal pixel coordinates
		
		let addr = (y*32) + (x/16);
		let off = x - ((x/16)*16); // x mod 16
		
		let val = _scrn[addr];
		
		if (_clr = false) {
			let val = val & ~_bit[off];
		} else {
			let val = val | _bit[off];
		}
		
		let _scrn[addr] = val;
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int t;
		
		do __checkCoords(x1, x2, y1, y2, 8); // Illegal line coordinates
		
		if ((x1=x2) & (y1=y2)) {
			do drawPixel(x1, y1);
			return;
		}
		
		if (x1 = x2) {
			do __drawVertLine(x1, Math.min(y1, y2), Math.max(y1, y2));
			return;
		}
		
		if (y1 = y2) {
			do __drawHorLine(y1, Math.min(x1, x2), Math.max(x1, x2));
			return;
		}
		
		// Make sure that we're going right
		if (x2 < x1) {
			let t = x1;
			let x1 = x2;
			let x2 = t;
			
			let t = y1;
			let y1 = y2;
			let y2 = t;
		}
		
		do __drawDiagLine(x1, x2, y1, y2);
		
		return;
    }

	function void __drawHorLine(int y, int x1, int x2) {
		// Optimize: Can directly manipulate screen buffer to draw 16px wide lines in 1 step
		var int startSeg, endSeg;
		var int offS, offE;
		var int clr;
		
		let startSeg = (y*32) + (x1/16);
		let endSeg = (y*32) + (x2/16);
		
		let offS = x1 - ((x1/16)*16); // x1 mod 16
		let offE = x2 - ((x2/16)*16); // x2 mod 16
		
		if (startSeg = endSeg) {
			// Only part of one segment
			do __drawPartHorLine(startSeg, ~(_bit[offS]-1) & (_bit[offE]-1));
			return;
		}
		
		if (offS > 0) {
			// first segment is not full
			do __drawPartHorLine(startSeg, ~(_bit[offS]-1));
			let startSeg = startSeg + 1;
		}
		
		if (offE > 0) {
			// last segment is not full
			do __drawPartHorLine(endSeg, _bit[offE]-1);
		}
		
		// Draw full segments
		while (startSeg < endSeg) {
			let _scrn[startSeg] = -_clr;
			let startSeg = startSeg+1;
		}
		
		return;
	}
	
	function void __drawPartHorLine(int seg, int ptrn) {
		var int val;
		let val = _scrn[seg];
		
		if (_clr = true) {
			let val = val|ptrn; // make these black
		} else {
			let val = val&~ptrn; // make these white
		}
		
		let _scrn[seg] = val;
		return;
	}
	
	function void __drawVertLine(int x, int y1, int y2) {
		while (y1 < y2) {
			do drawPixel(x, y1);
			let y1 = y1+1;
		}
		return;
	}
	
	function void __drawDiagLine(int x1, int x2, int y1, int y2) {
		var int dx, dy, diff, a, b, f;
		
		let dx = x2-x1;
		let dy = y2-y1;
		
		if (dy > 0) {
			let f = 1;
		} else {
			let f = -1;
		}
		
		while (~(a > dx) & ((f=1 & ~(b > dy)) | (f=-1 & ~(dy > b)))) {
			do Screen.drawPixel(x1+a, y1+b);
			if (diff < 0) {
				let a = a+1;
				let diff = diff + (f*dy);
			} else {
				let b = b+f;
				let diff = diff - dx;
			}
		}
		
		return;
	}
	
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int xs, xe, ys, ye;
		
		do __checkCoords(x1, x2, y1, y2, 9); // Illegal rectangle coordinates
		
		let ys = Math.min(y1,y2);
		let ye = Math.max(y1,y2);
		let xs = Math.min(x1,x2);
		let xe = Math.max(x1,x2);
		
		while (ys < ye) {
			do __drawHorLine(ys, x1, x2);
			let ys = ys+1;
		}
		
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy;
		var int r2;
		var int off;
		
		do __checkCoords(x,y,0,0, 12); // Illegal center coordinates
		do __checkCoords(x-r, x+r, y-r, y+r, 13); // Illegal radius
		
		let r2 = r*r;
		let dy = -r;
		while (dy < r) {
			let off = Math.sqrt(r2 - (dy*dy));
			do __drawHorLine(y+dy, x-off, x+off);
			let dy = dy+1;
		}
	
		return;
    }
	
	function void __checkCoords(int x1, int x2, int y1, int y2, int err) {
		if ((x1<0) | (y1<0) | (511<x2) | (255<y2) | (y2<0) | (255<y1)) {
			do Sys.error(err);
		}
		return;
	}
}
